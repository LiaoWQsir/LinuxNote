gdb调试：
	设置父进程调试路径：set follow-fork-mode parent(默认)
	设置子进程调试路径：set follow-fork0mode child

exec函数族：
	使进程执行某一程序。成功无返回值，失败返回 -1
	int execlp(const char *file, const char *arg, ...);	借助PATH环境变量找寻待执行程序
		参1：程序名
		参2：argv0
		参3：argv1
		...: argvN
		哨兵：NULL
		
	int execl(const char *path, const char *arg, ...);	自己指定执行程序路径。
	int execvp();

ps ajx --> pid ppid gid sid

孤儿进程：
	父进程先于子进程终止，子进程沦为“孤儿进程”,会被init进程领养。

僵尸进程：
	子进程终止，父进程尚未对子进程进行回收，在此期间，子进程为“僵尸进程”。 kill对其无效。

wait函数：	回收子进程退出资源，阻塞回收任意一个。
	pid_t wait(int *status)
	参数：（传出）回收进程的状态。
	返回值： 成功：回收进程的pid。
		 失败：-1， errno
	函数作用1：	阻塞等待子进程退出
	函数作用2： 	清理子进程残留在内核的pcb资源
	函数作用3： 	通过传出参数，得到子进程结束状态

	获取子进程正常终止值：
		WIFEXITED(status) --》为真 --》调用WEXITSTATUS（status）--》 得到子进程退出值。
	获取导致子进程异常终止信号：
		WIFSIGALED(status)--》为真--》调用WTERMSIG(status)--》得到导致子进程异常终止的信号编号。

waitpid函数：	指定某一个进程进行回收。可以设置非阻塞。	waitpid(-1, &status, 0) == wait(&status);
	pid_t waitpid(pid_t pid, int *status, int options)
	参数：
		pid:指定回收某一个子进程pid
			>0:待回收的子进程pid
			-1:任意子进程
			0：同组的子进程。
		status:(传出)回收进程的状态。
		options:WNOHANG 指定回收方式为，非阻塞。
	返回值： 
		>0:表成功回收的子进程pid
		0:函数调用时，参3指定了WNOHANG,并且，没有子进程结束。
		-1：失败。errno

总结：
	wait、waitpid 	一次调用，回收一个子进程。
			想回收多个。while

==============================================================

进程间通信的常用方式，特征：
	管道：简单
	信号：开销小
	mmap映射：非血缘关系进程间
	socket：稳定

管道：
	实现原理：内核借助环形队列机制，使用内核缓冲区实现。
	特质：	1.伪文件
		2.管道中的数据只能一次读取。
		3.数据在管道中，只能单向流动。
	局限性：1.自己写，不能自己读。
		2.数据不可以反复读。
		3.半双工通信。
		4.血缘关系进程间可用。

pipe函数：	创建，并打开管道。
	int pipe(int fd[2]);
	参数：  fd[0]: 读端。
		fd[1]: 写端。
	返回值：成功：0
		失败：-1 errno

管道的读写行为：
	读管道： 
		1.管道有数据，read返回实际读到的字节数。
		2.管道无数据： 	1）无写端，read返回0（类似读到文件尾）
			   	2）有写端，read阻塞等待。
	写管道：
		1.无读端，异常终止。	（SIGPIPE导致的）
		2.有读端：	1）管道已满，阻塞等待
				2）管道未满，返回写出的字节个数。

